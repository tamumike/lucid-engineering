{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/_data/options.ts","webpack:///./src/app/_models/pagination.ts","webpack:///./src/app/_pipes/ApprovedBoolean.pipe.ts","webpack:///./src/app/_pipes/IsApprovedPipe.pipe.ts","webpack:///./src/app/_pipes/StatusPipe.pipe.ts","webpack:///./src/app/_resolvers/request-approve.resolver.ts","webpack:///./src/app/_resolvers/request-detail.resolver.ts","webpack:///./src/app/_resolvers/request-view.resolver.ts","webpack:///./src/app/_services/alertify.service.ts","webpack:///./src/app/_services/request.service.ts","webpack:///./src/app/_services/user.service.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/nav/nav.component.css","webpack:///./src/app/nav/nav.component.html","webpack:///./src/app/nav/nav.component.ts","webpack:///./src/app/request/request-approve/request-approve.component.css","webpack:///./src/app/request/request-approve/request-approve.component.html","webpack:///./src/app/request/request-approve/request-approve.component.ts","webpack:///./src/app/request/request-create/request-create.component.css","webpack:///./src/app/request/request-create/request-create.component.html","webpack:///./src/app/request/request-create/request-create.component.ts","webpack:///./src/app/request/request-detail/request-detail.component.css","webpack:///./src/app/request/request-detail/request-detail.component.html","webpack:///./src/app/request/request-detail/request-detail.component.ts","webpack:///./src/app/request/request-view/request-view.component.css","webpack:///./src/app/request/request-view/request-view.component.html","webpack:///./src/app/request/request-view/request-view.component.ts","webpack:///./src/app/routes.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","export const options = {\n  groups: [\n    'Operations',\n    'Engineering',\n    'Commercial',\n    'Management'\n  ],\n  locations: [\n    'Plant',\n    'Pipeline',\n    'Compressor Station',\n    'Other'\n  ],\n  engineers: [\n    'Daffy Duck',\n    'Bugs Bunny',\n    'Porky Pig',\n    'Donald Duck',\n    'Mickey Mouse'\n  ]\n}\n","export interface Pagination {\n  currentPage: number;\n  itemsPerPage: number;\n  totalItems: number;\n  totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    result: T;\n    pagination: Pagination;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'ApprovedBoolean'\n})\nexport class ApprovedBooleanPipe implements PipeTransform {\n\n  transform(value: boolean, args?: any): string {\n    const x = value ? 'Approved' : 'Unapproved';\n    return x;\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'IsApprovedPipe'\n})\nexport class IsApprovedPipePipe implements PipeTransform {\n\n  transform(value: boolean, args?: any): string {\n    const x = value ? 'fa fa-check-circle' : 'fa fa-times-circle';\n    return x;\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'StatusPipe'\n})\nexport class StatusPipePipe implements PipeTransform {\n\n  transform(value: boolean, args?: any): string {\n    const x = value ? 'text-success' : 'text-danger';\n    return x;\n  }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { Resolve, Router, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { RequestService } from '../_services/request.service';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class RequestApproveResolver implements Resolve<Request>\r\n{\r\n\r\n  constructor(private requestService: RequestService, private router: Router) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot) {\r\n    return this.requestService.getRequest(route.params['esr'])\r\n      .pipe(\r\n        catchError(error => {\r\n          console.log(error);\r\n          this.router.navigate(['/requests']);\r\n          return of(null);\r\n        })\r\n      );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Resolve, Router, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { RequestService } from '../_services/request.service';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class RequestDetailResolver implements Resolve<Request>\r\n{\r\n\r\n  constructor(private requestService: RequestService, private router: Router) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot) {\r\n    return this.requestService.getRequest(route.params['esr'])\r\n      .pipe(\r\n        catchError(error => {\r\n          console.log(error);\r\n          this.router.navigate(['/requests']);\r\n          return of(null);\r\n        })\r\n      );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Resolve, Router, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { RequestService } from '../_services/request.service';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class RequestViewResolver implements Resolve<Request[]> {\r\n  pageNumber = 1;\r\n  pageSize = 10;\r\n\r\n  constructor(private requestService: RequestService, private router: Router) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot) {\r\n    return this.requestService.getRequests(this.pageNumber, this.pageSize)\r\n      .pipe(\r\n        catchError(error => {\r\n          console.log(error);\r\n          this.router.navigate(['/home']);\r\n          return of(null);\r\n        })\r\n      );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\ndeclare let alertify: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertifyService {\n\nconstructor() { }\n\n  confirm(message: string, okCallback: () => any) {\n    alertify.confirm(message, function(e) {\n      if (e) {\n        okCallback();\n      } else {}\n    });\n  }\n\n  success(message: string) {\n    alertify.success(message);\n  }\n\n  error(message: string) {\n    alertify.error(message);\n  }\n\n  warning(message: string) {\n    alertify.warning(message);\n  }\n\n  message(message: string) {\n    alertify.message(message);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from '../../environments/environment';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { PaginatedResult } from '../_models/pagination';\nimport { map } from 'rxjs/operators';\nimport { Request } from '../_models/request';\nimport { AlertifyService } from './alertify.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RequestService {\n  baseUrl = environment.apiUrl;\n\nconstructor(private http: HttpClient, private alertify: AlertifyService) { }\n\ngetRequests(page?, itemsPerPage?, requestParams?): Observable<PaginatedResult<Request[]>> {\n\n  const paginatedResult: PaginatedResult<Request[]> = new PaginatedResult<Request[]>();\n\n  let params = new HttpParams();\n\n  if (page != null && itemsPerPage != null) {\n    params = params.append('pageNumber', page);\n    params = params.append('pageSize', itemsPerPage);\n  }\n\n  if (requestParams != null) {\n    params = params.append('group', requestParams.group);\n    params = params.append('approved', requestParams.approved);\n    params = params.append('locationOfProject', requestParams.locationOfProject);\n    params = params.append('engineerAssigned', requestParams.engineerAssigned);\n    params = params.append('esr', requestParams.esr);\n    params = params.append('orderBy', requestParams.orderBy);\n  }\n\n  return this.http.get<Request[]>(this.baseUrl + 'requests', { observe: 'response', params })\n  .pipe(\n    map(response => {\n      paginatedResult.result = response.body;\n      if (response.headers.get('Pagination') != null) {\n        paginatedResult.pagination = JSON.parse(response.headers.get('Pagination'));\n      }\n      return paginatedResult;\n    })\n  );\n}\n\ngetRequest(esr: string): Observable<Request> {\n  return this.http.get<Request>(this.baseUrl + 'requests/' + esr);\n}\n\nsubmit(request: Request) {\n  return this.http.post(this.baseUrl + 'requests/submit', request);\n}\n\napprove(request: Request) {\n  return this.http.put(this.baseUrl + 'requests/' + request.esr, request);\n}\n\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  baseUrl = environment.apiUrl;\n  username: any;\n  members = this.getGroupMembers();\n\nconstructor(private http: HttpClient) { }\n\ngetUsername() {\n  return this.http.get(this.baseUrl + 'user/username', {responseType: 'text'});\n}\n\ngetGroupMembers() {\n  return this.http.get(this.baseUrl + 'user/groupmembers');\n}\n\nisAuthorizedToCreate() {\n  return this.http.get(this.baseUrl + 'user/authorizedtocreate');\n}\n\nisAuthorizedToApprove() {\n  return this.http.get(this.baseUrl + 'user/authorizedtoapprove');\n}\n\n}\n","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<app-nav></app-nav>\\n<router-outlet></router-outlet>\\n\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Engineering';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BsDropdownModule, BsDatepickerModule, PaginationModule, ButtonsModule } from 'ngx-bootstrap';\n\nimport { AppComponent } from './app.component';\nimport { NavComponent } from './nav/nav.component';\nimport { RequestCreateComponent } from './request/request-create/request-create.component';\nimport { RequestViewComponent } from './request/request-view/request-view.component';\nimport { IsApprovedPipePipe } from './_pipes/IsApprovedPipe.pipe';\nimport { RequestDetailComponent } from './request/request-detail/request-detail.component';\nimport { HomeComponent } from './home/home.component';\nimport { RouterModule } from '@angular/router';\nimport { appRoutes } from './routes';\nimport { RequestService } from './_services/request.service';\nimport { RequestDetailResolver } from './_resolvers/request-detail.resolver';\nimport { RequestViewResolver } from './_resolvers/request-view.resolver';\nimport { StatusPipePipe } from './_pipes/StatusPipe.pipe';\nimport { ApprovedBooleanPipe } from './_pipes/ApprovedBoolean.pipe';\nimport { FormsModule } from '@angular/forms';\nimport { AlertifyService } from './_services/alertify.service';\nimport { UserService } from './_services/user.service';\nimport { RequestApproveComponent } from './request/request-approve/request-approve.component';\nimport { RequestApproveResolver } from './_resolvers/request-approve.resolver';\n\n@NgModule({\n   declarations: [\n      AppComponent,\n      NavComponent,\n      RequestCreateComponent,\n      RequestViewComponent,\n      RequestDetailComponent,\n      IsApprovedPipePipe,\n      StatusPipePipe,\n      ApprovedBooleanPipe,\n      HomeComponent,\n      RequestApproveComponent\n   ],\n   imports: [\n      BrowserModule,\n      HttpClientModule,\n      BsDropdownModule.forRoot(),\n      RouterModule.forRoot(appRoutes),\n      BsDatepickerModule.forRoot(),\n      FormsModule,\n      PaginationModule.forRoot(),\n      ButtonsModule.forRoot()\n   ],\n   providers: [\n     RequestService,\n     RequestDetailResolver,\n     RequestViewResolver,\n     RequestApproveResolver,\n     AlertifyService,\n     UserService\n   ],\n   bootstrap: [\n      AppComponent\n   ]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<p>\\n  home works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"p {\\r\\n  color: white;\\r\\n}\\r\\n\"","module.exports = \"<nav class=\\\"navbar navbar-expand-md navbar-dark bg-dark p-2\\\">\\n  <a class=\\\"navbar-brand\\\" [routerLink]=\\\"['/home']\\\">Engineering Portal</a>\\n\\n  <ul class=\\\"navbar-nav mr-auto ml-3\\\">\\n    <div class=\\\"dropdown\\\" dropdown>\\n        <a class=\\\"dropdown-toggle text-light\\\" dropdownToggle>\\n          Service Requests\\n        </a>\\n\\n        <div class=\\\"dropdown-menu mt-3\\\" *dropdownMenu>\\n          <a class=\\\"dropdown-item\\\" [routerLink]=\\\"['/request-create']\\\">Create Service Request</a>\\n          <a class=\\\"dropdown-item\\\" [routerLink]=\\\"['/requests']\\\">View All Service Requests</a>\\n        </div>\\n      </div>\\n  </ul>\\n  <!-- <div class=\\\"container d-flex text-right justify-content-right\\\">\\n    <p class=\\\"mr-3 font-weight-bold\\\">{{username}}</p>\\n  </div>\\n  <img src=\\\"../../assets/lucidlogoWhite.png\\\" alt=\\\"\\\" class=\\\"logo\\\"> -->\\n  <div class=\\\"container d-flex flex-row-reverse p-0 m-0\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm\\\">\\n      </div>\\n      <div class=\\\"col-sm\\\">\\n      </div>\\n      <div class=\\\"col-sm\\\">\\n        <img src=\\\"../../assets/lucidlogoWhite.png\\\" alt=\\\"\\\" class=\\\"logo\\\">\\n        <p class=\\\"font-weight-bold mt-2\\\">Welcome, {{username}}</p>\\n      </div>\\n    </div>\\n  </div>\\n</nav>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../_services/user.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.css']\n})\nexport class NavComponent implements OnInit {\n  username: any;\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.getUser();\n  }\n\n  getUser() {\n    this.userService.getUsername().subscribe(username => {\n      this.username = username;\n    });\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container mt-5 w-75\\\">\\n    <div class=\\\"container p-0\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-sm\\\">\\n          <button type=\\\"button\\\" class=\\\"btn btn-dark mb-2\\\" [routerLink]=\\\"['/requests', request.esr]\\\"><i class=\\\"fa fa-arrow-circle-left mr-2\\\"></i>Back</button>\\n        </div>\\n        <div class=\\\"col-sm\\\">\\n        </div>\\n        <div class=\\\"col-sm d-flex flex-row-reverse\\\">\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"card text-center border-dark\\\">\\n        <div class=\\\"card-header\\\">\\n            <h3 class=\\\"card-title font-weight-bolder mb-0\\\">{{request.esr}}</h3>\\n        </div>\\n        <form #approvalForm=\\\"ngForm\\\" (ngSubmit)=\\\"approve()\\\">\\n          <div class=\\\"card-body form-group\\\">\\n            <div class=\\\"container p-3 text-left\\\">\\n              <label for=\\\"group\\\" class=\\\"card-subtitle font-weight-bold\\\">Group</label>\\n              <select class=\\\"form-control p-0\\\" style=\\\"width: 130px\\\" id=\\\"group\\\" [(ngModel)]=\\\"request.group\\\" name=\\\"group\\\">\\n                  <option *ngFor=\\\"let group of groupsList\\\" [attr.selected]=\\\"request.group\\\">\\n                    {{group}}\\n                  </option>\\n              </select>\\n            </div>\\n            <div class=\\\"container p-3 text-left\\\">\\n              <label class=\\\"card-subtitle font-weight-bold\\\" for=\\\"locationOfProject\\\">Location of Project</label>\\n              <select name=\\\"locationOfProject\\\" id=\\\"locationOfProject\\\" class=\\\"form-control p-0\\\" style=\\\"width: 130px\\\" [(ngModel)]=\\\"request.locationOfProject\\\">\\n                <option *ngFor=\\\"let location of locationsList\\\" [attr.selected]=\\\"request.locationOfProject\\\">\\n                  {{location}}\\n                </option>\\n              </select>\\n            </div>\\n            <div class=\\\"container p-3 text-left\\\">\\n              <label class=\\\"font-weight-bold\\\" for=\\\"description\\\">Description</label>\\n              <textarea class=\\\"form-control mb-3\\\" id=\\\"description\\\" rows=\\\"3\\\" required name=\\\"description\\\" [(ngModel)]=\\\"request.description\\\"></textarea>\\n            </div>\\n            <div class=\\\"container p-3 text-left\\\">\\n              <label for=\\\"engineerAssigned\\\" class=\\\"card-subtitle font-weight-bold\\\">Engineer Assigned</label>\\n              <select name=\\\"engineersAssigned\\\" id=\\\"engineerAssigned\\\" class=\\\"form-control p-0\\\" style=\\\"width: 130px\\\" [(ngModel)]=\\\"request.engineerAssigned\\\">\\n                <option [ngValue]=\\\"null\\\"></option>\\n                <option *ngFor=\\\"let engineer of engineersList\\\">\\n                  {{engineer}}\\n                </option>\\n              </select>\\n            </div>\\n            <div class=\\\"container p-3 text-left\\\">\\n              <label class=\\\"font-weight-bold\\\" for=\\\"requestedDateForCompletion\\\">Requested Date For Completion</label>\\n              <input type=\\\"text\\\"\\n                      required\\n                      name=\\\"requestedDateForCompletion\\\"\\n                      [(ngModel)]=\\\"request.requestedDateForCompletion\\\"\\n                      id=\\\"requestedDateForCompletion\\\"\\n                      class=\\\"form-control mb-3\\\"\\n                      bsDatepicker\\n                      style=\\\"width: 130px\\\"\\n                      [bsConfig]=\\\"{ dateInputFormat: 'YYYY-MM-DD', containerClass: 'theme-default' }\\\">\\n            </div>\\n            <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Approve</button>\\n          </div>\\n        </form>\\n        <div class=\\\"card-footer p-2 font-weight-bold\\\">\\n          <p class=\\\"mb-0 {{request.approved | StatusPipe}}\\\">Pending Approval</p>\\n        </div>\\n      </div>\\n  </div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { RequestService } from 'src/app/_services/request.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Request } from '../../_models/request';\nimport { options } from 'src/app/_data/options';\nimport { AlertifyService } from 'src/app/_services/alertify.service';\nimport { UserService } from 'src/app/_services/user.service';\n\n@Component({\n  selector: 'app-request-approve',\n  templateUrl: './request-approve.component.html',\n  styleUrls: ['./request-approve.component.css']\n})\nexport class RequestApproveComponent implements OnInit {\n  request: Request;\n  approvedRequest: any = {};\n  groupsList = options.groups;\n  locationsList = options.locations;\n  engineersList: any;\n  firstVal = undefined;\n  // model: any = {};\n\n  constructor(private requestService: RequestService, private route: ActivatedRoute,\n    private router: Router, private alertify: AlertifyService, private userService: UserService) { }\n\n  ngOnInit() {\n    this.route.data.subscribe(data => {\n      this.request = data['request'];\n    });\n\n    this.getEngineers();\n  }\n\n  getEngineers() {\n    this.userService.getGroupMembers().subscribe(response => {\n      this.engineersList = response;\n    }, error => {\n      this.alertify.error('Error retrieving list of engineers.');\n    });\n  }\n\n  approve() {\n    if (this.request.engineerAssigned != null) {\n      this.request.approved = true;\n      this.requestService.approve(this.request).subscribe(response => {\n        this.approvedRequest = Object.assign({}, response);\n        this.router.navigate(['/requests/' + this.approvedRequest.esr]);\n        this.alertify.success('Request has been approved.');\n      }, error => {\n        this.alertify.error('There was an error approving the request.');\n      });\n    } else {\n      this.alertify.error('Please assign an engineer to the request');\n    }\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container mt-3 p-3\\\">\\n  <h3>Create a Service Request</h3>\\n  <form #submitForm=\\\"ngForm\\\" (ngSubmit)=\\\"submit()\\\">\\n\\n    <div class=\\\"col-xs-12 col-12 col-md-4 p-4 form-group border\\\">\\n      <label class=\\\"font-weight-bold\\\" for=\\\"requestedDateForCompletion\\\">Requested Date For Completion</label>\\n      <input type=\\\"text\\\"\\n              autocomplete=\\\"off\\\"\\n              required\\n              name=\\\"requestedDateForCompletion\\\"\\n              [(ngModel)]=\\\"model.requestedDateForCompletion\\\"\\n              id=\\\"requestedDateForCompletion\\\"\\n              class=\\\"form-control mb-3\\\"\\n              bsDatepicker\\n              [bsConfig]=\\\"{ dateInputFormat: 'YYYY-MM-DD', containerClass: 'theme-default', adaptivePosition: true }\\\">\\n\\n        <label class=\\\"font-weight-bold\\\" for=\\\"group\\\">Group</label>\\n        <select class=\\\"form-control mb-3\\\" id=\\\"group\\\" required name=\\\"group\\\" [(ngModel)]=\\\"model.group\\\">\\n          <option *ngFor=\\\"let group of groupsList\\\">{{group}}</option>\\n        </select>\\n\\n        <label class=\\\"font-weight-bold\\\" for=\\\"locationOfProject\\\">Location of Project</label>\\n        <select class=\\\"form-control mb-3\\\" id=\\\"locationOfProject\\\" required name=\\\"locationOfProject\\\" [(ngModel)]=\\\"model.locationOfProject\\\">\\n          <option *ngFor=\\\"let location of locationsList\\\">{{location}}</option>\\n        </select>\\n\\n        <label for=\\\"initiatedBy\\\" class=\\\"font-weight-bold\\\">Initiated By</label>\\n        <input type=\\\"text\\\" class=\\\"form-control mb-3\\\" readonly required name=\\\"initiatedBy\\\" [(ngModel)]=\\\"model.initiatedBy\\\" value=\\\"{{username}}\\\">\\n\\n        <label class=\\\"font-weight-bold\\\" for=\\\"description\\\">Description</label>\\n        <textarea class=\\\"form-control mb-3\\\" id=\\\"description\\\" rows=\\\"5\\\" required name=\\\"description\\\" [(ngModel)]=\\\"model.description\\\"></textarea>\\n\\n      </div>\\n      <input class=\\\"btn btn-sm btn-success mr-2\\\" type=\\\"submit\\\" value=\\\"Submit\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-sm btn-danger\\\" [routerLink]=\\\"['/requests']\\\">Cancel</button>\\n  </form>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { RequestService } from 'src/app/_services/request.service';\nimport { Router } from '@angular/router';\nimport { AlertifyService } from 'src/app/_services/alertify.service';\nimport { options } from 'src/app/_data/options';\nimport { UserService } from 'src/app/_services/user.service';\n\n@Component({\n  selector: 'app-request-create',\n  templateUrl: './request-create.component.html',\n  styleUrls: ['./request-create.component.css']\n})\nexport class RequestCreateComponent implements OnInit {\n  baseUrl = environment.apiUrl;\n  model: any = {};\n  request: any = {};\n  groupsList = options.groups;\n  locationsList = options.locations;\n  username: string;\n\n  constructor(private requestService: RequestService, private router: Router,\n    private alertify: AlertifyService, private userService: UserService) { }\n\n  ngOnInit() {\n    this.getUsername();\n  }\n\n  getUsername() {\n    this.userService.getUsername().subscribe(username => {\n      this.username = username;\n    });\n  }\n\n  submit() {\n    this.model.initiatedBy = this.username;\n    this.requestService.submit(this.model).subscribe(response => {\n      this.alertify.success('Successfully created request.');\n      this.request = Object.assign({}, response);\n      this.router.navigate(['/requests/' + this.request.esr]);\n    }, error => {\n      this.alertify.error(error);\n    });\n  }\n\n}\n","module.exports = \".fa-check-circle {\\r\\n  color: white;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container mt-5 w-75\\\">\\n  <div class=\\\"container p-0\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-dark mb-2\\\" [routerLink]=\\\"['/requests']\\\"><i class=\\\"fa fa-arrow-circle-left mr-2\\\"></i>Back</button>\\n      </div>\\n      <div class=\\\"col-sm\\\">\\n\\n      </div>\\n      <div class=\\\"col-sm d-flex flex-row-reverse\\\">\\n        <button *ngIf=\\\"authorizedToApprove && !approved\\\" type=\\\"button\\\" class=\\\"btn btn-success mb-2\\\" [routerLink]=\\\"['/request-approve', request.esr]\\\"><i class=\\\"fa fa-check-circle mr-2\\\"></i>Approve</button>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"card text-center border-dark\\\">\\n      <div class=\\\"card-header\\\">\\n          <h3 class=\\\"card-title font-weight-bolder mb-0\\\">{{request.esr}}</h3>\\n      </div>\\n      <div class=\\\"card-body\\\">\\n        <div class=\\\"container p-3 text-left\\\">\\n            <h6 class=\\\"card-subtitle mb-1 font-weight-bold\\\">Group</h6>\\n            <p class=\\\"card-text text-muted\\\">{{request.group}}</p>\\n        </div>\\n        <div class=\\\"container p-3 text-left\\\">\\n            <h6 class=\\\"card-subtitle mb-1 font-weight-bold\\\">Location of Project</h6>\\n            <p class=\\\"card-text text-muted\\\">{{request.locationOfProject}}</p>\\n        </div>\\n        <div class=\\\"container p-3 text-left\\\">\\n          <h6 class=\\\"card-subtitle mb-1 font-weight-bold\\\">Description</h6>\\n          <p class=\\\"card-text text-muted\\\">{{request.description}}</p>\\n        </div>\\n        <div class=\\\"container p-3 text-left\\\">\\n            <h6 class=\\\"card-subtitle mb-1 font-weight-bold\\\">Date Initiated</h6>\\n            <p class=\\\"card-text text-muted\\\">{{request.dateInitiated | date}}</p>\\n        </div>\\n        <div class=\\\"container p-3 text-left\\\">\\n            <h6 class=\\\"card-subtitle mb-1 font-weight-bold\\\">Initiated By</h6>\\n            <p class=\\\"card-text text-muted\\\">{{request.initiatedBy}}</p>\\n        </div>\\n        <div class=\\\"container p-3 text-left\\\">\\n            <h6 class=\\\"card-subtitle mb-1 font-weight-bold\\\">Engineer Assigned</h6>\\n            <p class=\\\"card-text text-muted\\\">{{request.engineerAssigned}}</p>\\n        </div>\\n        <div class=\\\"container p-3 text-left\\\">\\n            <h6 class=\\\"card-subtitle mb-1 font-weight-bold\\\">Requested Date For Completion</h6>\\n            <p class=\\\"card-text text-muted\\\">{{request.requestedDateForCompletion | date}}</p>\\n        </div>\\n      </div>\\n      <div class=\\\"card-footer p-2 font-weight-bold\\\">\\n        <p class=\\\"mb-0 {{request.approved | StatusPipe}}\\\">{{request.approved | ApprovedBoolean}}</p>\\n      </div>\\n    </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { RequestService } from 'src/app/_services/request.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { Request } from '../../_models/request';\nimport { UserService } from 'src/app/_services/user.service';\n\n@Component({\n  selector: 'app-request-detail',\n  templateUrl: './request-detail.component.html',\n  styleUrls: ['./request-detail.component.css']\n})\nexport class RequestDetailComponent implements OnInit {\n  request: Request;\n  authorizedToApprove: any;\n  approved: any;\n\n  constructor(private requestService: RequestService, private route: ActivatedRoute, private userService: UserService) { }\n\n  ngOnInit() {\n    this.route.data.subscribe(data => {\n      this.request = data['request'];\n      this.approved = this.request.approved;\n    });\n\n    this.isAuthorizedToApprove();\n  }\n\n  // enableApproval() {\n\n  // }\n\n  isAuthorizedToApprove() {\n    this.userService.isAuthorizedToApprove().subscribe(response => {\n      this.authorizedToApprove = response;\n    }, error => {\n      console.log(error);\n    });\n  }\n\n  // loadUser() {\n  //   this.requestService.getRequest(this.route.snapshot.params['esr']).subscribe((request: Request) => {\n  //     this.request = request;\n  //   }, error => {\n  //     console.log(error);\n  //   });\n  // }\n\n}\n","module.exports = \"table {\\r\\n  font-size: 14px;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container mt-5\\\">\\n  <div class=\\\"container mb-3 p-0 d-flex justify-content-end\\\">\\n    <form class=\\\"form-inline\\\" #form=\\\"ngForm\\\" (ngSubmit)=\\\"loadRequests()\\\" novalidate>\\n        <div class=\\\"form-group px-2\\\">\\n          <label for=\\\"filterESR\\\" class=\\\"font-weight-bold\\\">ESR:</label>\\n          <input type=\\\"text\\\" id=\\\"filterESR\\\" class=\\\"form-control ml-1 mr-3\\\" name=\\\"esr\\\" [(ngModel)]=\\\"requestParams.esr\\\">\\n          <label for=\\\"group\\\" class=\\\"font-weight-bold\\\">Group: </label>\\n          <select class=\\\"form-control ml-1 mr-3\\\" style=\\\"width: 130px\\\" id=\\\"group\\\" [(ngModel)]=\\\"requestParams.group\\\" name=\\\"group\\\">\\n            <option *ngFor=\\\"let group of groups\\\" [value]=\\\"group\\\">\\n              {{group}}\\n            </option>\\n          </select>\\n          <label for=\\\"locationOfProject\\\" class=\\\"font-weight-bold\\\">Location:</label>\\n          <select class=\\\"form-control ml-1 mr-3\\\" style=\\\"width: 130px\\\" id=\\\"locationOfProject\\\" [(ngModel)]=\\\"requestParams.locationOfProject\\\" name=\\\"locationOfProject\\\">\\n            <option *ngFor=\\\"let location of locations\\\" [value]=\\\"location\\\">\\n              {{location}}\\n            </option>\\n          </select>\\n          <label for=\\\"engineerAssigned\\\" class=\\\"font-weight-bold\\\">Engineeer:</label>\\n          <select class=\\\"form-control ml-1 mr-3\\\" style=\\\"width: 130px\\\" id=\\\"engineerAssigned\\\" [(ngModel)]=\\\"requestParams.engineerAssigned\\\" name=\\\"engineerAssigned\\\">\\n            <option *ngFor=\\\"let engineer of engineersList\\\" [value]=\\\"engineer\\\">\\n              {{engineer}}\\n            </option>\\n          </select>\\n          <div class=\\\"form-check ml-2\\\">\\n              <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\"  id=\\\"approved\\\" name=\\\"approved\\\" [(ngModel)]=\\\"requestParams.approved\\\">\\n              <label class=\\\"form-check-label font-weight-bold\\\" for=\\\"approved\\\">\\n                Approved\\n              </label>\\n            </div>\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-sm ml-3\\\">Apply Filters</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-secondary btn-sm\\\" style=\\\"margin-left:10px\\\" (click)=\\\"resetFilters()\\\">Reset Filter</button>\\n      </form>\\n      <br>\\n  </div>\\n<table class=\\\"table table-striped table-hover table-sm table-bordered text-center\\\">\\n  <thead class=\\\"thead-dark\\\">\\n    <tr>\\n      <th scope=\\\"col\\\">View</th>\\n      <th scope=\\\"col\\\">ESR</th>\\n      <th scope=\\\"col\\\">Date Initiated</th>\\n      <th scope=\\\"col\\\">Reqested Completion Date</th>\\n      <th scope=\\\"col\\\">Initiated By</th>\\n      <th scope=\\\"col\\\">Group</th>\\n      <th scope=\\\"col\\\">Location</th>\\n      <th scope=\\\"col\\\">Approved</th>\\n      <th scope=\\\"col\\\">Engineer</th>\\n      <th scope=\\\"col\\\">Date Completed</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr *ngFor=\\\"let request of requests\\\">\\n      <th><button class=\\\"btn btn-link p-0\\\" [routerLink]=\\\"['/requests', request.esr]\\\"><i class=\\\"fa fa-plus-square\\\"></i></button></th>\\n      <th>{{request.esr}}</th>\\n      <td>{{request.dateInitiated | date}}</td>\\n      <td>{{request.requestedDateForCompletion | date}}</td>\\n      <td>{{request.initiatedBy}}</td>\\n      <td>{{request.group}}</td>\\n      <td>{{request.locationOfProject}}</td>\\n      <td><i class=\\\"{{request.approved | IsApprovedPipe}}\\\"></i></td>\\n      <td>{{request.engineerAssigned}}</td>\\n      <td>{{request.dateCompleted}}</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\\n\\n<div class=\\\"container mb-5\\\">\\n  <div class=\\\"row align-items-center\\\">\\n    <div class=\\\"col-sm\\\">\\n       <!-- *ngIf=\\\"authorizedToCreate\\\" -->\\n        <button type=\\\"button\\\" class=\\\"btn btn-success btn-sm\\\" [routerLink]=\\\"['/request-create']\\\"><i class=\\\"fa fa-plus-circle mr-2\\\"></i>Create New Request</button>\\n    </div>\\n    <div class=\\\"col-sm\\\">\\n    </div>\\n    <div class=\\\"col-sm d-flex justify-content-end p-0\\\">\\n      <form class=\\\"form-inline p-0\\\" #form=\\\"ngForm\\\" (ngSubmit)=\\\"loadRequests()\\\" novalidate>\\n          <label for=\\\"orderBy\\\" class=\\\"font-weight-bold mr-1\\\">Order By:</label>\\n          <select class=\\\"form-control ml-1 p-0\\\" style=\\\"width: 100px\\\" id=\\\"orderBy\\\" [(ngModel)]=\\\"requestParams.orderBy\\\" name=\\\"orderBy\\\">\\n              <option *ngFor=\\\"let field of orderList\\\" [value]=\\\"field.value\\\">\\n                {{field.display}}\\n              </option>\\n            </select>\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-sm mr-2 ml-4\\\">Apply</button>\\n      </form>\\n    </div>\\n  </div>\\n</div>\\n<div class=\\\"d-flex justify-content-center\\\">\\n  <pagination [boundaryLinks]=\\\"true\\\"\\n    [totalItems]=\\\"pagination.totalItems\\\"\\n    [(ngModel)]=\\\"pagination.currentPage\\\"\\n    (pageChanged)=\\\"pageChanged($event)\\\"\\n    previousText=\\\"&lsaquo;\\\" nextText=\\\"&rsaquo;\\\" firstText=\\\"&laquo;\\\" lastText=\\\"&raquo;\\\">\\n  </pagination>\\n</div>\\n<div class=\\\"text-center mt-2\\\">\\n    <h6>{{pagination.totalItems}} Total Service Requests</h6>\\n  </div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { RequestService } from 'src/app/_services/request.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { Request } from '../../_models/request';\nimport { Pagination, PaginatedResult } from 'src/app/_models/pagination';\nimport { options } from 'src/app/_data/options';\nimport { UserService } from 'src/app/_services/user.service';\nimport { AlertifyService } from 'src/app/_services/alertify.service';\n\n@Component({\n  selector: 'app-request-view',\n  templateUrl: './request-view.component.html',\n  styleUrls: ['./request-view.component.css']\n})\nexport class RequestViewComponent implements OnInit {\n  requests: Request[];\n  pagination: Pagination;\n  groups = options.groups;\n  locations = options.locations;\n  requestParams: any = {};\n  orderList = [{value: 'esr', display: 'ESR'},\n    {value: 'dateInitiated', display: 'Date Initiated'},\n    {value: 'approved', display: 'Approved'}];\n  engineersList: any;\n  authorizedToCreate: any;\n\n  constructor(private requestService: RequestService, private route: ActivatedRoute,\n    private userService: UserService, private alertify: AlertifyService) { }\n\n  ngOnInit() {\n    this.route.data.subscribe(data => {\n      this.requests = data['requests'].result;\n      this.pagination = data['requests'].pagination;\n    });\n\n    this.getEngineers();\n    this.isAuthorized();\n\n    this.requestParams.group = '';\n    this.requestParams.locationOfProject = '';\n    this.requestParams.engineerAssigned = '';\n    this.requestParams.esr = '';\n    this.requestParams.approved = false;\n    this.requestParams.orderBy = 'esr';\n  }\n\n  isAuthorized() {\n    this.userService.isAuthorizedToCreate().subscribe(response => {\n      this.authorizedToCreate = response;\n    }, error => {\n      console.log(error);\n    });\n  }\n\n  resetFilters() {\n    this.requestParams.group = '';\n    this.requestParams.esr = '';\n    this.requestParams.approved = false;\n    this.requestParams.locationOfProject = '';\n    this.requestParams.engineerAssigned = '';\n    this.loadRequests();\n  }\n\n  pageChanged(event: any): void {\n    this.pagination.currentPage = event.page;\n    this.loadRequests();\n  }\n\n  getEngineers() {\n    this.userService.getGroupMembers().subscribe(response => {\n      this.engineersList = response;\n    }, error => {\n      this.alertify.error('Error retrieving list of engineers.');\n    });\n  }\n\n  loadRequests() {\n    this.requestService.getRequests(this.pagination.currentPage, this.pagination.itemsPerPage, this.requestParams)\n      .subscribe((res: PaginatedResult<Request[]>) => {\n      this.requests = res.result;\n      this.pagination = res.pagination;\n    }, error => {\n      console.log(error);\n    });\n  }\n}\n","import { Routes } from '@angular/router';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { RequestViewComponent } from './request/request-view/request-view.component';\r\nimport { RequestCreateComponent } from './request/request-create/request-create.component';\r\nimport { RequestDetailComponent } from './request/request-detail/request-detail.component';\r\nimport { RequestDetailResolver } from './_resolvers/request-detail.resolver';\r\nimport { RequestViewResolver } from './_resolvers/request-view.resolver';\r\nimport { RequestApproveComponent } from './request/request-approve/request-approve.component';\r\nimport { RequestApproveResolver } from './_resolvers/request-approve.resolver';\r\n\r\nexport const appRoutes: Routes = [\r\n  { path: 'home', component: HomeComponent },\r\n  { path: 'requests', component: RequestViewComponent, resolve: {requests: RequestViewResolver} },\r\n  { path: 'request-create', component: RequestCreateComponent },\r\n  { path: 'requests/:esr', component: RequestDetailComponent, resolve: {request: RequestDetailResolver} },\r\n  { path: 'request-approve/:esr', component: RequestApproveComponent, resolve: {request: RequestApproveResolver} },\r\n  { path: '**', redirectTo: 'home', pathMatch: 'full' }\r\n];\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:5000/api/'\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}